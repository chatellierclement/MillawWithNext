// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id            Int         @id @default(autoincrement())
  planning_id   String?
  date          DateTime
  permanence    Permanence? @relation(fields: [permanence_id], references: [id])
  permanence_id Int?
  isDayOff      Boolean?
  user          User        @relation(fields: [user_id], references: [id])
  user_id       Int
  Exchange      Exchange[]
}

model Exchange {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime
  userSender         User      @relation(name: "SenderEvent", fields: [user_id_sender], references: [id])
  event              Event     @relation(fields: [eventId], references: [id])
  user_id_sender     Int
  updatedAt          DateTime
  userRecipient      User      @relation(name: "RecipientEvent", fields: [user_id_recipient], references: [id])
  user_id_recipient  Int
  isAccepted         Boolean?
  exchangeReference  Int?      @unique
  echange            Exchange? @relation("ExchangeReference", fields: [exchangeReference], references: [id])
  exchangeReferenced Exchange? @relation("ExchangeReference")
  eventId            Int
}

model Role {
  id      Int    @id @default(autoincrement())
  libelle String
  user    User[]
}

model Bar {
  id   Int    @id @default(autoincrement())
  name String
  user User[]
  api  Api?
}

model TypePermanence {
  id         Int          @id @default(autoincrement())
  name       String
  permanence Permanence[]
}

model Api {
  id     Int    @id @default(autoincrement())
  token  String
  bar    Bar    @relation(fields: bar_id, references: [id])
  bar_id Int    @unique
}

model Permanence {
  id                Int                @id @default(autoincrement())
  name              String
  typePermanence    TypePermanence     @relation(fields: typePermanence_id, references: [id])
  typePermanence_id Int
  Event             Event[]
  Apply             Apply[]
  CommissionOffice  CommissionOffice[]
}

model Apply {
  id            Int        @id @default(autoincrement())
  date          DateTime
  permanence    Permanence @relation(fields: [permanence_id], references: [id])
  permanence_id Int
  isAccepted    Boolean?
  user          User       @relation(fields: [user_id], references: [id])
  user_id       Int
}

model User {
  id               Int                @id @default(autoincrement())
  firstName        String
  lastName         String
  email            String
  password         String
  bar              Bar                @relation(fields: bar_id, references: [id])
  bar_id           Int
  role             Role               @relation(fields: [role_id], references: [id])
  role_id          Int
  event            Event[]
  apply            Apply[]
  CommissionOffice CommissionOffice[]
  Document         Document[]
  sentEvents       Exchange[]         @relation("SenderEvent")
  receiveEvents    Exchange[]         @relation("RecipientEvent")
}

model Document {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [user_id], references: [id])
  user_id   Int
  name      String
  url       String
}

model CommissionOffice {
  id            Int        @id @default(autoincrement())
  date          DateTime
  Sexe          String
  FirstName     String
  LastName      String
  BirthdayDate  DateTime
  City          String
  PostalCode    String
  Address       String
  permanance    Permanence @relation(fields: [permanence_id], references: [id])
  permanence_id Int
  user          User       @relation(fields: [user_id], references: [id])
  user_id       Int
}
